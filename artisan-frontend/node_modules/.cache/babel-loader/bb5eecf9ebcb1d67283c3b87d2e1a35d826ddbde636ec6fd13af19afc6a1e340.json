{"ast":null,"code":"import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";import axios from\"axios\";const initialState={userName:\"\",id:null,loading:false};export const createUser=createAsyncThunk(\"chat/user\",async(_ref,_ref2)=>{let{name}=_ref;let{rejectWithValue}=_ref2;try{const backendURL=process.env.REACT_APP_API_BASE_URL||\"\";const response=await axios.post(`${backendURL}/chat/user`,{name});// save user and id to local storage -> due to dev refreshes and no backend auth\n// Normally you'd use a token or session cookie if it's account based\n// Or phone number / email address to keep track of user -> continue where they left off in chat on disconnect\nlocalStorage.setItem(\"user\",JSON.stringify(response.data));return response.data;}catch(err){return rejectWithValue(err);}});const chatSlice=createSlice({name:\"chat\",initialState,reducers:{updateUserName:(state,action)=>{state.userName=action.payload;}},extraReducers:builder=>{builder.addCase(createUser.fulfilled,(state,_ref3)=>{let{payload}=_ref3;state.userName=payload.name;state.id=payload.id;state.loading=false;}).addCase(createUser.rejected,(state,action)=>{console.error(action.error);state.loading=false;}).addCase(createUser.pending,state=>{state.loading=true;});}});export const{updateUserName}=chatSlice.actions;export default chatSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","userName","id","loading","createUser","_ref","_ref2","name","rejectWithValue","backendURL","process","env","REACT_APP_API_BASE_URL","response","post","localStorage","setItem","JSON","stringify","data","err","chatSlice","reducers","updateUserName","state","action","payload","extraReducers","builder","addCase","fulfilled","_ref3","rejected","console","error","pending","actions","reducer"],"sources":["/home/lightberry/bucket/artisan-frontend/src/redux/userReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios, { AxiosResponse } from \"axios\";\n\ninterface InitialStateType {\n\tuserName: string;\n\tid: number | null;\n\tloading: boolean;\n}\n\nconst initialState: InitialStateType = {\n\tuserName: \"\",\n\tid: null,\n\tloading: false,\n};\n\ninterface ThunkParams {\n\tname: string;\n}\n\ninterface CreateUserResponseData {\n\tname: string;\n\tid: number;\n\tcreated_at: string;\n\tmessages: []; // Ignored in this case since history is not needed in a random chat bot\n}\n\nexport const createUser = createAsyncThunk(\n\t\"chat/user\",\n\tasync ({ name }: ThunkParams, { rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst backendURL: string = process.env.REACT_APP_API_BASE_URL || \"\";\n\t\t\tconst response = await axios.post(`${backendURL}/chat/user`, {\n\t\t\t\tname,\n\t\t\t});\n\t\t\t// save user and id to local storage -> due to dev refreshes and no backend auth\n\t\t\t// Normally you'd use a token or session cookie if it's account based\n\t\t\t// Or phone number / email address to keep track of user -> continue where they left off in chat on disconnect\n\t\t\tlocalStorage.setItem(\"user\", JSON.stringify(response.data));\n\t\t\treturn response.data as CreateUserResponseData;\n\t\t} catch (err) {\n\t\t\treturn rejectWithValue(err);\n\t\t}\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: \"chat\",\n\tinitialState,\n\treducers: {\n\t\tupdateUserName: (state, action) => {\n\t\t\tstate.userName = action.payload;\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(createUser.fulfilled, (state, { payload }) => {\n\t\t\t\tstate.userName = payload.name;\n\t\t\t\tstate.id = payload.id;\n\t\t\t\tstate.loading = false;\n\t\t\t})\n\t\t\t.addCase(createUser.rejected, (state, action) => {\n\t\t\t\tconsole.error(action.error);\n\t\t\t\tstate.loading = false;\n\t\t\t})\n\t\t\t.addCase(createUser.pending, (state) => {\n\t\t\t\tstate.loading = true;\n\t\t\t});\n\t},\n});\n\nexport const { updateUserName } = chatSlice.actions;\nexport default chatSlice.reducer;\n"],"mappings":"AAAA,OAASA,gBAAgB,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,MAAO,CAAAC,KAAK,KAAyB,OAAO,CAQ5C,KAAM,CAAAC,YAA8B,CAAG,CACtCC,QAAQ,CAAE,EAAE,CACZC,EAAE,CAAE,IAAI,CACRC,OAAO,CAAE,KACV,CAAC,CAaD,MAAO,MAAM,CAAAC,UAAU,CAAGP,gBAAgB,CACzC,WAAW,CACX,MAAAQ,IAAA,CAAAC,KAAA,GAAsD,IAA/C,CAAEC,IAAkB,CAAC,CAAAF,IAAA,IAAE,CAAEG,eAAgB,CAAC,CAAAF,KAAA,CAChD,GAAI,CACH,KAAM,CAAAG,UAAkB,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAAI,EAAE,CACnE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAd,KAAK,CAACe,IAAI,CAAC,GAAGL,UAAU,YAAY,CAAE,CAC5DF,IACD,CAAC,CAAC,CACF;AACA;AACA;AACAQ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC3D,MAAO,CAAAN,QAAQ,CAACM,IAAI,CACrB,CAAE,MAAOC,GAAG,CAAE,CACb,MAAO,CAAAZ,eAAe,CAACY,GAAG,CAAC,CAC5B,CACD,CACD,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGvB,WAAW,CAAC,CAC7BS,IAAI,CAAE,MAAM,CACZP,YAAY,CACZsB,QAAQ,CAAE,CACTC,cAAc,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CAClCD,KAAK,CAACvB,QAAQ,CAAGwB,MAAM,CAACC,OAAO,CAChC,CACD,CAAC,CACDC,aAAa,CAAGC,OAAO,EAAK,CAC3BA,OAAO,CACLC,OAAO,CAACzB,UAAU,CAAC0B,SAAS,CAAE,CAACN,KAAK,CAAAO,KAAA,GAAkB,IAAhB,CAAEL,OAAQ,CAAC,CAAAK,KAAA,CACjDP,KAAK,CAACvB,QAAQ,CAAGyB,OAAO,CAACnB,IAAI,CAC7BiB,KAAK,CAACtB,EAAE,CAAGwB,OAAO,CAACxB,EAAE,CACrBsB,KAAK,CAACrB,OAAO,CAAG,KAAK,CACtB,CAAC,CAAC,CACD0B,OAAO,CAACzB,UAAU,CAAC4B,QAAQ,CAAE,CAACR,KAAK,CAAEC,MAAM,GAAK,CAChDQ,OAAO,CAACC,KAAK,CAACT,MAAM,CAACS,KAAK,CAAC,CAC3BV,KAAK,CAACrB,OAAO,CAAG,KAAK,CACtB,CAAC,CAAC,CACD0B,OAAO,CAACzB,UAAU,CAAC+B,OAAO,CAAGX,KAAK,EAAK,CACvCA,KAAK,CAACrB,OAAO,CAAG,IAAI,CACrB,CAAC,CAAC,CACJ,CACD,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEoB,cAAe,CAAC,CAAGF,SAAS,CAACe,OAAO,CACnD,cAAe,CAAAf,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}