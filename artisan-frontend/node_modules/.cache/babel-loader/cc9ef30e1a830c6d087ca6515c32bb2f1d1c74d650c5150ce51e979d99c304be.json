{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { original } from \"@reduxjs/toolkit\";\nconst initialState = {\n  messages: [],\n  loading: false\n};\nexport const sendMessage = createAsyncThunk(\"message/send\", async (message, {\n  getState,\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    const {\n      user\n    } = getState();\n    const backendURL = process.env.REACT_APP_API_BASE_URL || \"\";\n    const userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n    if (!user.id && !userFromStorage.id) {\n      return rejectWithValue(\"No User ID\");\n    }\n    const payload = {\n      content: message,\n      user_id: user.id || userFromStorage.id\n    };\n\n    // Save Message to local state\n    dispatch(addMessage({\n      content: message,\n      user_id: payload.user_id.toString(),\n      isBot: false\n    }));\n    const {\n      data\n    } = await axios.post(`${backendURL}/chat/message/new`, payload);\n    return data;\n  } catch (error) {\n    // OPtional way to add errors to the UI (not implemented in this example)\n    // if (error.message) {\n    // \tdispatch(\n    // \t\taddError({\n    // \t\t\tmessage: error.message,\n    // \t\t\tlevel: \"error\",\n    // \t\t})\n    // \t);\n    // \tdispatch(clearError());\n    // }\n    return rejectWithValue(error);\n  }\n});\nexport const sendDeleteMessageRequest = createAsyncThunk(\"message/delete\", async (message, {\n  getState,\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    const {\n      user\n    } = getState();\n    const backendURL = process.env.REACT_APP_API_BASE_URL || \"\";\n    const userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n    if (!user.id && !userFromStorage.id) {\n      return rejectWithValue(\"No User ID\");\n    }\n    const payload = {\n      content: message,\n      user_id: user.id || userFromStorage.id\n    };\n\n    // Save Message to local state\n    dispatch(addMessage({\n      content: message,\n      user_id: payload.user_id.toString(),\n      isBot: false\n    }));\n    const {\n      data\n    } = await axios.post(`${backendURL}/chat/message/new`, payload);\n    return data;\n  } catch (error) {\n    // OPtional way to add errors to the UI (not implemented in this example)\n    // if (error.message) {\n    // \tdispatch(\n    // \t\taddError({\n    // \t\t\tmessage: error.message,\n    // \t\t\tlevel: \"error\",\n    // \t\t})\n    // \t);\n    // \tdispatch(clearError());\n    // }\n    return rejectWithValue(error);\n  }\n});\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    addMessage: (state, {\n      payload\n    }) => {\n      state.messages.push(payload);\n    },\n    deleteMessage: (state, {\n      payload\n    }) => {\n      state.messages = state.messages.filter((msg, index) => index !== payload);\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(sendMessage.fulfilled, (state, {\n      payload\n    }) => {\n      const [userMessage, botMessage] = payload;\n      const originalStateMessages = original(state.messages);\n      // .findLastIndex() is used to find the last message sent by the user\n      // REVIEW -> .findLastIndex() bug TS ES2022 or ESNext\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex#browser_compatibility\n      // @ts-ignore\n      const userMessageIndex = originalStateMessages.findLastIndex(message => message.content === userMessage.content);\n\n      // Update the message with the ID from the server\n      if (userMessageIndex !== -1) {\n        state.messages[userMessageIndex].id = userMessage.id;\n      }\n\n      // Add bot response\n      state.messages.push({\n        content: botMessage.content,\n        user_id: botMessage.user_id,\n        isBot: botMessage.is_bot,\n        id: botMessage.id\n      });\n      state.messages.push();\n    }).addCase(sendMessage.pending, state => {\n      state.loading = true;\n    }).addCase(sendMessage.rejected, (state, {\n      payload\n    }) => {\n      state.messages.push({\n        content: \"Sorry, I am not able to respond right now. Please try again later.\",\n        user_id: state.messages[0].user_id,\n        isBot: true,\n        id: 999\n      });\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  addMessage,\n  deleteMessage\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","original","initialState","messages","loading","sendMessage","message","getState","rejectWithValue","dispatch","user","backendURL","process","env","REACT_APP_API_BASE_URL","userFromStorage","JSON","parse","localStorage","getItem","id","payload","content","user_id","addMessage","toString","isBot","data","post","error","sendDeleteMessageRequest","chatSlice","name","reducers","state","push","deleteMessage","filter","msg","index","extraReducers","builder","addCase","fulfilled","userMessage","botMessage","originalStateMessages","userMessageIndex","findLastIndex","is_bot","pending","rejected","actions","reducer"],"sources":["/home/lightberry/bucket/assessments/artisan-frontend/src/redux/chatReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"./store\";\nimport { original } from \"@reduxjs/toolkit\";\n\nexport interface Message {\n\tcontent: string;\n\tuser_id: number;\n\ttimestamp?: number;\n\tid: number;\n\tisBot: boolean;\n}\n\ninterface InitialStateType {\n\tmessages: Array<Message>;\n\tloading: boolean;\n}\n\nconst initialState: InitialStateType = {\n\tmessages: [],\n\tloading: false,\n};\n\ninterface SendMessageRequest {\n\tcontent: string;\n\tuser_id: number;\n}\n\ninterface SendMessageResponse {\n\tcontent: string;\n\tuser_id: number;\n\tis_bot: boolean;\n\tid: number;\n\tcreated_at: string;\n}\n\nexport const sendMessage = createAsyncThunk(\n\t\"message/send\",\n\tasync (message: string, { getState, rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconst { user } = getState() as RootState;\n\t\t\tconst backendURL: string = process.env.REACT_APP_API_BASE_URL || \"\";\n\t\t\tconst userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\t\t\tif (!user.id && !userFromStorage.id) {\n\t\t\t\treturn rejectWithValue(\"No User ID\");\n\t\t\t}\n\n\t\t\tconst payload: SendMessageRequest = {\n\t\t\t\tcontent: message,\n\t\t\t\tuser_id: user.id || userFromStorage.id,\n\t\t\t};\n\n\t\t\t// Save Message to local state\n\t\t\tdispatch(addMessage({ content: message, user_id: payload.user_id.toString(), isBot: false }));\n\n\t\t\tconst { data } = await axios.post(`${backendURL}/chat/message/new`, payload);\n\n\t\t\treturn data as SendMessageResponse[];\n\t\t} catch (error: any) {\n\t\t\t// OPtional way to add errors to the UI (not implemented in this example)\n\t\t\t// if (error.message) {\n\t\t\t// \tdispatch(\n\t\t\t// \t\taddError({\n\t\t\t// \t\t\tmessage: error.message,\n\t\t\t// \t\t\tlevel: \"error\",\n\t\t\t// \t\t})\n\t\t\t// \t);\n\t\t\t// \tdispatch(clearError());\n\t\t\t// }\n\t\t\treturn rejectWithValue(error);\n\t\t}\n\t}\n);\n\nexport const sendDeleteMessageRequest = createAsyncThunk(\n\t\"message/delete\",\n\tasync (message: string, { getState, rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconst { user } = getState() as RootState;\n\t\t\tconst backendURL: string = process.env.REACT_APP_API_BASE_URL || \"\";\n\t\t\tconst userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\t\t\tif (!user.id && !userFromStorage.id) {\n\t\t\t\treturn rejectWithValue(\"No User ID\");\n\t\t\t}\n\n\t\t\tconst payload: SendMessageRequest = {\n\t\t\t\tcontent: message,\n\t\t\t\tuser_id: user.id || userFromStorage.id,\n\t\t\t};\n\n\t\t\t// Save Message to local state\n\t\t\tdispatch(addMessage({ content: message, user_id: payload.user_id.toString(), isBot: false }));\n\n\t\t\tconst { data } = await axios.post(`${backendURL}/chat/message/new`, payload);\n\n\t\t\treturn data as SendMessageResponse[];\n\t\t} catch (error: any) {\n\t\t\t// OPtional way to add errors to the UI (not implemented in this example)\n\t\t\t// if (error.message) {\n\t\t\t// \tdispatch(\n\t\t\t// \t\taddError({\n\t\t\t// \t\t\tmessage: error.message,\n\t\t\t// \t\t\tlevel: \"error\",\n\t\t\t// \t\t})\n\t\t\t// \t);\n\t\t\t// \tdispatch(clearError());\n\t\t\t// }\n\t\t\treturn rejectWithValue(error);\n\t\t}\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: \"chat\",\n\tinitialState,\n\treducers: {\n\t\taddMessage: (state, { payload }) => {\n\t\t\tstate.messages.push(payload);\n\t\t},\n\t\tdeleteMessage: (state, { payload }) => {\n\t\t\tstate.messages = state.messages.filter((msg, index) => index !== payload);\n\t\t},\n\t},\n\textraReducers(builder) {\n\t\tbuilder\n\t\t\t.addCase(sendMessage.fulfilled, (state, { payload }) => {\n\t\t\t\tconst [userMessage, botMessage] = payload as SendMessageResponse[];\n\n\t\t\t\tconst originalStateMessages = original(state.messages) as Array<Message>;\n\t\t\t\t// .findLastIndex() is used to find the last message sent by the user\n\t\t\t\t// REVIEW -> .findLastIndex() bug TS ES2022 or ESNext\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex#browser_compatibility\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst userMessageIndex = originalStateMessages.findLastIndex(\n\t\t\t\t\t(message: Message) => message.content === userMessage.content\n\t\t\t\t);\n\n\t\t\t\t// Update the message with the ID from the server\n\t\t\t\tif (userMessageIndex !== -1) {\n\t\t\t\t\tstate.messages[userMessageIndex].id = userMessage.id;\n\t\t\t\t}\n\n\t\t\t\t// Add bot response\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: botMessage.content,\n\t\t\t\t\tuser_id: botMessage.user_id,\n\t\t\t\t\tisBot: botMessage.is_bot,\n\t\t\t\t\tid: botMessage.id,\n\t\t\t\t});\n\n\t\t\t\tstate.messages.push();\n\t\t\t})\n\t\t\t.addCase(sendMessage.pending, (state) => {\n\t\t\t\tstate.loading = true;\n\t\t\t})\n\t\t\t.addCase(sendMessage.rejected, (state, { payload }) => {\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: \"Sorry, I am not able to respond right now. Please try again later.\",\n\t\t\t\t\tuser_id: state.messages[0].user_id,\n\t\t\t\t\tisBot: true,\n\t\t\t\t\tid: 999,\n\t\t\t\t});\n\t\t\t\tstate.loading = false;\n\t\t\t});\n\t},\n});\n\nexport const { addMessage, deleteMessage } = chatSlice.actions;\nexport default chatSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}