{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  messages: [],\n  loading: false\n};\nexport const sendMessage = createAsyncThunk(\"message/send\", async ({\n  message\n}, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      user\n    } = getState();\n    const backendURL = process.env.BACKEND_BASE_URL || \"\";\n    if (!user.id) {\n      return rejectWithValue(\"Something went wrong. Please try again later...\");\n    }\n    const payload = {\n      message: message,\n      user_id: user.id\n    };\n    const {\n      data\n    } = await axios.post(`${backendURL}/chat/message/new`, payload);\n    return data;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    addMessage: (state, {\n      payload\n    }) => {\n      state.messages.push(payload);\n    },\n    deleteMessage: (state, {\n      payload\n    }) => {\n      state.messages = state.messages.filter((msg, index) => index !== payload);\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(sendMessage.fulfilled, (state, {\n      payload\n    }) => {\n      state.messages.push({\n        content: payload.content,\n        user_id: payload.user_id.toString(),\n        isBot: true\n      });\n    }).addCase(sendMessage.pending, state => {\n      state.loading = true;\n    });\n  }\n});\nexport const {\n  addMessage,\n  deleteMessage\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","messages","loading","sendMessage","message","getState","rejectWithValue","user","backendURL","process","env","BACKEND_BASE_URL","id","payload","user_id","data","post","error","chatSlice","name","reducers","addMessage","state","push","deleteMessage","filter","msg","index","extraReducers","builder","addCase","fulfilled","content","toString","isBot","pending","actions","reducer"],"sources":["/home/lightberry/bucket/artisan-test/frontend/src/redux/chatReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"./store\";\n\nexport interface Message {\n\tcontent: string;\n\tuser_id: string;\n\ttimestamp?: number;\n\tid?: number;\n\tisBot: boolean;\n}\n\ninterface InitialStateType {\n\tmessages: Message[];\n\tloading: boolean;\n}\n\nconst initialState: InitialStateType = {\n\tmessages: [],\n\tloading: false,\n};\n\ninterface SendMessagePayload {\n\tmessage: string;\n\tuser_id: number;\n}\n\ninterface ThunkParams {\n\tmessage: string;\n}\n\ninterface SendMessageResponse {\n\tcontent: string;\n\tuser_id: number;\n}\n\nexport const sendMessage = createAsyncThunk(\n\t\"message/send\",\n\tasync ({ message }: ThunkParams, { getState, rejectWithValue }) => {\n\t\ttry {\n\t\t\tconst { user } = getState() as RootState;\n\t\t\tconst backendURL: string = process.env.BACKEND_BASE_URL || \"\";\n\n\t\t\tif (!user.id) {\n\t\t\t\treturn rejectWithValue(\"Something went wrong. Please try again later...\");\n\t\t\t}\n\n\t\t\tconst payload: SendMessagePayload = {\n\t\t\t\tmessage: message,\n\t\t\t\tuser_id: user.id,\n\t\t\t};\n\n\t\t\tconst { data } = await axios.post(`${backendURL}/chat/message/new`, payload);\n\t\t\treturn data as SendMessageResponse;\n\t\t} catch (error) {\n\t\t\treturn rejectWithValue(error);\n\t\t}\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: \"chat\",\n\tinitialState,\n\treducers: {\n\t\taddMessage: (state, { payload }) => {\n\t\t\tstate.messages.push(payload);\n\t\t},\n\t\tdeleteMessage: (state, { payload }) => {\n\t\t\tstate.messages = state.messages.filter((msg, index) => index !== payload);\n\t\t},\n\t},\n\textraReducers(builder) {\n\t\tbuilder\n\t\t\t.addCase(sendMessage.fulfilled, (state, { payload }) => {\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: payload.content,\n\t\t\t\t\tuser_id: payload.user_id.toString(),\n\t\t\t\t\tisBot: true,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.addCase(sendMessage.pending, (state) => {\n\t\t\t\tstate.loading = true;\n\t\t\t});\n\t},\n});\n\nexport const { addMessage, deleteMessage } = chatSlice.actions;\nexport default chatSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAgBzB,MAAMC,YAA8B,GAAG;EACtCC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACV,CAAC;AAgBD,OAAO,MAAMC,WAAW,GAAGN,gBAAgB,CAC1C,cAAc,EACd,OAAO;EAAEO;AAAqB,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAClE,IAAI;IACH,MAAM;MAAEC;IAAK,CAAC,GAAGF,QAAQ,CAAC,CAAc;IACxC,MAAMG,UAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,EAAE;IAE7D,IAAI,CAACJ,IAAI,CAACK,EAAE,EAAE;MACb,OAAON,eAAe,CAAC,iDAAiD,CAAC;IAC1E;IAEA,MAAMO,OAA2B,GAAG;MACnCT,OAAO,EAAEA,OAAO;MAChBU,OAAO,EAAEP,IAAI,CAACK;IACf,CAAC;IAED,MAAM;MAAEG;IAAK,CAAC,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,GAAGR,UAAU,mBAAmB,EAAEK,OAAO,CAAC;IAC5E,OAAOE,IAAI;EACZ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACf,OAAOX,eAAe,CAACW,KAAK,CAAC;EAC9B;AACD,CACD,CAAC;AAED,MAAMC,SAAS,GAAGpB,WAAW,CAAC;EAC7BqB,IAAI,EAAE,MAAM;EACZnB,YAAY;EACZoB,QAAQ,EAAE;IACTC,UAAU,EAAEA,CAACC,KAAK,EAAE;MAAET;IAAQ,CAAC,KAAK;MACnCS,KAAK,CAACrB,QAAQ,CAACsB,IAAI,CAACV,OAAO,CAAC;IAC7B,CAAC;IACDW,aAAa,EAAEA,CAACF,KAAK,EAAE;MAAET;IAAQ,CAAC,KAAK;MACtCS,KAAK,CAACrB,QAAQ,GAAGqB,KAAK,CAACrB,QAAQ,CAACwB,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKA,KAAK,KAAKd,OAAO,CAAC;IAC1E;EACD,CAAC;EACDe,aAAaA,CAACC,OAAO,EAAE;IACtBA,OAAO,CACLC,OAAO,CAAC3B,WAAW,CAAC4B,SAAS,EAAE,CAACT,KAAK,EAAE;MAAET;IAAQ,CAAC,KAAK;MACvDS,KAAK,CAACrB,QAAQ,CAACsB,IAAI,CAAC;QACnBS,OAAO,EAAEnB,OAAO,CAACmB,OAAO;QACxBlB,OAAO,EAAED,OAAO,CAACC,OAAO,CAACmB,QAAQ,CAAC,CAAC;QACnCC,KAAK,EAAE;MACR,CAAC,CAAC;IACH,CAAC,CAAC,CACDJ,OAAO,CAAC3B,WAAW,CAACgC,OAAO,EAAGb,KAAK,IAAK;MACxCA,KAAK,CAACpB,OAAO,GAAG,IAAI;IACrB,CAAC,CAAC;EACJ;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEmB,UAAU;EAAEG;AAAc,CAAC,GAAGN,SAAS,CAACkB,OAAO;AAC9D,eAAelB,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}