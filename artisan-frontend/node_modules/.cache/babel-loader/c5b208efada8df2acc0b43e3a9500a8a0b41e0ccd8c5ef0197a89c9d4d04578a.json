{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  messages: [],\n  loading: false\n};\nexport const sendMessage = createAsyncThunk(\"message/send\", async (message, {\n  getState,\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    console.log(`sending message: ${message}`);\n    const {\n      user\n    } = getState();\n    const backendURL = process.env.REACT_APP_API_BASE_URL || \"\";\n    const userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n    if (!user.id && !userFromStorage.id) {\n      return rejectWithValue(\"No User ID\");\n    }\n    const payload = {\n      content: message,\n      user_id: user.id || userFromStorage.id\n    };\n    const {\n      data\n    } = await axios.post(`${backendURL}/chat/message/new`, payload);\n    return data;\n  } catch (error) {\n    // OPtional way to add errors to the UI (not implemented in this example)\n    // if (error.message) {\n    // \tdispatch(\n    // \t\taddError({\n    // \t\t\tmessage: error.message,\n    // \t\t\tlevel: \"error\",\n    // \t\t})\n    // \t);\n    // \tdispatch(clearError());\n    // }\n    return rejectWithValue(error);\n  }\n});\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialState,\n  reducers: {\n    addMessage: (state, {\n      payload\n    }) => {\n      state.messages.push(payload);\n    },\n    deleteMessage: (state, {\n      payload\n    }) => {\n      state.messages = state.messages.filter((msg, index) => index !== payload);\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(sendMessage.fulfilled, (state, {\n      payload\n    }) => {\n      state.messages.push({\n        content: payload.content,\n        user_id: payload.user_id.toString(),\n        isBot: true\n      });\n    }).addCase(sendMessage.pending, state => {\n      state.loading = true;\n    }).addCase(sendMessage.rejected, (state, {\n      payload\n    }) => {\n      console.error(payload);\n      state.messages.push({\n        content: \"Sorry, I am not able to respond right now. Please try again later.\",\n        user_id: \"bot\",\n        isBot: true\n      });\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  addMessage,\n  deleteMessage\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","messages","loading","sendMessage","message","getState","rejectWithValue","dispatch","console","log","user","backendURL","process","env","REACT_APP_API_BASE_URL","userFromStorage","JSON","parse","localStorage","getItem","id","payload","content","user_id","data","post","error","chatSlice","name","reducers","addMessage","state","push","deleteMessage","filter","msg","index","extraReducers","builder","addCase","fulfilled","toString","isBot","pending","rejected","actions","reducer"],"sources":["/home/lightberry/bucket/artisan-test/frontend/src/redux/chatReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"./store\";\nimport { addError, clearError } from \"./errorsReducer\";\n\nexport interface Message {\n\tcontent: string;\n\tuser_id: string;\n\ttimestamp?: number;\n\tid?: number;\n\tisBot: boolean;\n}\n\ninterface InitialStateType {\n\tmessages: Message[];\n\tloading: boolean;\n}\n\nconst initialState: InitialStateType = {\n\tmessages: [],\n\tloading: false,\n};\n\ninterface SendMessageRequest {\n\tcontent: string;\n\tuser_id: number;\n}\n\ninterface SendMessageResponse {\n\tcontent: string;\n\tuser_id: number;\n\tis_bot: boolean;\n\tid: number;\n\tcreated_at: string;\n}\n\nexport const sendMessage = createAsyncThunk(\n\t\"message/send\",\n\tasync (message: string, { getState, rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconsole.log(`sending message: ${message}`);\n\t\t\tconst { user } = getState() as RootState;\n\t\t\tconst backendURL: string = process.env.REACT_APP_API_BASE_URL || \"\";\n\t\t\tconst userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\t\t\tif (!user.id && !userFromStorage.id) {\n\t\t\t\treturn rejectWithValue(\"No User ID\");\n\t\t\t}\n\n\t\t\tconst payload: SendMessageRequest = {\n\t\t\t\tcontent: message,\n\t\t\t\tuser_id: user.id || userFromStorage.id,\n\t\t\t};\n\n\t\t\tconst { data } = await axios.post(`${backendURL}/chat/message/new`, payload);\n\t\t\treturn data as SendMessageResponse;\n\t\t} catch (error: any) {\n\t\t\t// OPtional way to add errors to the UI (not implemented in this example)\n\t\t\t// if (error.message) {\n\t\t\t// \tdispatch(\n\t\t\t// \t\taddError({\n\t\t\t// \t\t\tmessage: error.message,\n\t\t\t// \t\t\tlevel: \"error\",\n\t\t\t// \t\t})\n\t\t\t// \t);\n\t\t\t// \tdispatch(clearError());\n\t\t\t// }\n\t\t\treturn rejectWithValue(error);\n\t\t}\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: \"chat\",\n\tinitialState,\n\treducers: {\n\t\taddMessage: (state, { payload }) => {\n\t\t\tstate.messages.push(payload);\n\t\t},\n\t\tdeleteMessage: (state, { payload }) => {\n\t\t\tstate.messages = state.messages.filter((msg, index) => index !== payload);\n\t\t},\n\t},\n\textraReducers(builder) {\n\t\tbuilder\n\t\t\t.addCase(sendMessage.fulfilled, (state, { payload }) => {\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: payload.content,\n\t\t\t\t\tuser_id: payload.user_id.toString(),\n\t\t\t\t\tisBot: true,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.addCase(sendMessage.pending, (state) => {\n\t\t\t\tstate.loading = true;\n\t\t\t})\n\t\t\t.addCase(sendMessage.rejected, (state, { payload }) => {\n\t\t\t\tconsole.error(payload);\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: \"Sorry, I am not able to respond right now. Please try again later.\",\n\t\t\t\t\tuser_id: \"bot\",\n\t\t\t\t\tisBot: true,\n\t\t\t\t});\n\t\t\t\tstate.loading = false;\n\t\t\t});\n\t},\n});\n\nexport const { addMessage, deleteMessage } = chatSlice.actions;\nexport default chatSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}