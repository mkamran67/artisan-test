{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";import{createAsyncThunk}from\"@reduxjs/toolkit\";export const clearError=createAsyncThunk(\"error/clean\",// A unique action type\nasync()=>{const response=await new Promise(resolve=>setTimeout(()=>resolve({message:\"\",level:\"error\"}),3000));return response;});const initialState={message:\"\",level:\"error\"};const chatSlice=createSlice({name:\"chat\",initialState,reducers:{addError:(state,_ref)=>{let{payload}=_ref;state.message=payload.message;state.level=payload.level;}},extraReducers:builder=>{builder.addCase(clearError.fulfilled,(state,_ref2)=>{let{payload}=_ref2;state.message=payload.message;state.level=payload.level;});}});export const{addError}=chatSlice.actions;export default chatSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","clearError","response","Promise","resolve","setTimeout","message","level","initialState","chatSlice","name","reducers","addError","state","_ref","payload","extraReducers","builder","addCase","fulfilled","_ref2","actions","reducer"],"sources":["/home/lightberry/bucket/artisan-frontend/src/redux/errorsReducer.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\ninterface InitialStateType {\n\tmessage: string;\n\tlevel: \"error\" | \"warning\" | \"info\";\n}\n\nexport const clearError = createAsyncThunk(\n\t\"error/clean\", // A unique action type\n\tasync () => {\n\t\tconst response: InitialStateType = await new Promise((resolve) =>\n\t\t\tsetTimeout(() => resolve({ message: \"\", level: \"error\" }), 3000)\n\t\t);\n\t\treturn response;\n\t}\n);\n\nconst initialState: InitialStateType = {\n\tmessage: \"\",\n\tlevel: \"error\",\n};\n\nconst chatSlice = createSlice({\n\tname: \"chat\",\n\tinitialState,\n\treducers: {\n\t\taddError: (state, { payload }) => {\n\t\t\tstate.message = payload.message;\n\t\t\tstate.level = payload.level;\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(clearError.fulfilled, (state, { payload }) => {\n\t\t\tstate.message = payload.message;\n\t\t\tstate.level = payload.level;\n\t\t});\n\t},\n});\n\nexport const { addError } = chatSlice.actions;\nexport default chatSlice.reducer;\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,gBAAgB,KAAQ,kBAAkB,CAOnD,MAAO,MAAM,CAAAC,UAAU,CAAGD,gBAAgB,CACzC,aAAa,CAAE;AACf,SAAY,CACX,KAAM,CAAAE,QAA0B,CAAG,KAAM,IAAI,CAAAC,OAAO,CAAEC,OAAO,EAC5DC,UAAU,CAAC,IAAMD,OAAO,CAAC,CAAEE,OAAO,CAAE,EAAE,CAAEC,KAAK,CAAE,OAAQ,CAAC,CAAC,CAAE,IAAI,CAChE,CAAC,CACD,MAAO,CAAAL,QAAQ,CAChB,CACD,CAAC,CAED,KAAM,CAAAM,YAA8B,CAAG,CACtCF,OAAO,CAAE,EAAE,CACXC,KAAK,CAAE,OACR,CAAC,CAED,KAAM,CAAAE,SAAS,CAAGV,WAAW,CAAC,CAC7BW,IAAI,CAAE,MAAM,CACZF,YAAY,CACZG,QAAQ,CAAE,CACTC,QAAQ,CAAEA,CAACC,KAAK,CAAAC,IAAA,GAAkB,IAAhB,CAAEC,OAAQ,CAAC,CAAAD,IAAA,CAC5BD,KAAK,CAACP,OAAO,CAAGS,OAAO,CAACT,OAAO,CAC/BO,KAAK,CAACN,KAAK,CAAGQ,OAAO,CAACR,KAAK,CAC5B,CACD,CAAC,CACDS,aAAa,CAAGC,OAAO,EAAK,CAC3BA,OAAO,CAACC,OAAO,CAACjB,UAAU,CAACkB,SAAS,CAAE,CAACN,KAAK,CAAAO,KAAA,GAAkB,IAAhB,CAAEL,OAAQ,CAAC,CAAAK,KAAA,CACxDP,KAAK,CAACP,OAAO,CAAGS,OAAO,CAACT,OAAO,CAC/BO,KAAK,CAACN,KAAK,CAAGQ,OAAO,CAACR,KAAK,CAC5B,CAAC,CAAC,CACH,CACD,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEK,QAAS,CAAC,CAAGH,SAAS,CAACY,OAAO,CAC7C,cAAe,CAAAZ,SAAS,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}