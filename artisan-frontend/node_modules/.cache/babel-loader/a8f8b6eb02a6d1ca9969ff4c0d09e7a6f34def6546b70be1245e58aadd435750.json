{"ast":null,"code":"import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";import axios from\"axios\";const initialState={messages:[],loading:false};export const sendMessage=createAsyncThunk(\"message/send\",async(message,_ref)=>{let{getState,rejectWithValue,dispatch}=_ref;try{const{user}=getState();const backendURL=process.env.REACT_APP_API_BASE_URL||\"\";const userFromStorage=JSON.parse(localStorage.getItem(\"user\")||\"{}\");if(!user.id&&!userFromStorage.id){return rejectWithValue(\"No User ID\");}const payload={content:message,user_id:user.id||userFromStorage.id};// Save Message to local state\ndispatch(addMessage({content:message,user_id:payload.user_id.toString(),isBot:false}));const{data}=await axios.post(`${backendURL}/chat/message/new`,payload);return data;}catch(error){// OPtional way to add errors to the UI (not implemented in this example)\n// if (error.message) {\n// \tdispatch(\n// \t\taddError({\n// \t\t\tmessage: error.message,\n// \t\t\tlevel: \"error\",\n// \t\t})\n// \t);\n// \tdispatch(clearError());\n// }\nreturn rejectWithValue(error);}});const chatSlice=createSlice({name:\"chat\",initialState,reducers:{addMessage:(state,_ref2)=>{let{payload}=_ref2;state.messages.push(payload);},deleteMessage:(state,_ref3)=>{let{payload}=_ref3;state.messages=state.messages.filter((msg,index)=>index!==payload);}},extraReducers(builder){builder.addCase(sendMessage.fulfilled,(state,_ref4)=>{let{payload}=_ref4;state.messages.push({content:payload.content,user_id:payload.user_id.toString(),isBot:true});}).addCase(sendMessage.pending,state=>{state.loading=true;}).addCase(sendMessage.rejected,(state,_ref5)=>{let{payload}=_ref5;console.error(payload);state.messages.push({content:\"Sorry, I am not able to respond right now. Please try again later.\",user_id:\"bot\",isBot:true});state.loading=false;});}});export const{addMessage,deleteMessage}=chatSlice.actions;export default chatSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","messages","loading","sendMessage","message","_ref","getState","rejectWithValue","dispatch","user","backendURL","process","env","REACT_APP_API_BASE_URL","userFromStorage","JSON","parse","localStorage","getItem","id","payload","content","user_id","addMessage","toString","isBot","data","post","error","chatSlice","name","reducers","state","_ref2","push","deleteMessage","_ref3","filter","msg","index","extraReducers","builder","addCase","fulfilled","_ref4","pending","rejected","_ref5","console","actions","reducer"],"sources":["/home/lightberry/bucket/artisan-frontend/src/redux/chatReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"./store\";\nimport { addError, clearError } from \"./errorsReducer\";\n\nexport interface Message {\n\tcontent: string;\n\tuser_id: string;\n\ttimestamp?: number;\n\tid?: number;\n\tisBot: boolean;\n}\n\ninterface InitialStateType {\n\tmessages: Message[];\n\tloading: boolean;\n}\n\nconst initialState: InitialStateType = {\n\tmessages: [],\n\tloading: false,\n};\n\ninterface SendMessageRequest {\n\tcontent: string;\n\tuser_id: number;\n}\n\ninterface SendMessageResponse {\n\tcontent: string;\n\tuser_id: number;\n\tis_bot: boolean;\n\tid: number;\n\tcreated_at: string;\n}\n\nexport const sendMessage = createAsyncThunk(\n\t\"message/send\",\n\tasync (message: string, { getState, rejectWithValue, dispatch }) => {\n\t\ttry {\n\t\t\tconst { user } = getState() as RootState;\n\t\t\tconst backendURL: string = process.env.REACT_APP_API_BASE_URL || \"\";\n\t\t\tconst userFromStorage = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n\t\t\tif (!user.id && !userFromStorage.id) {\n\t\t\t\treturn rejectWithValue(\"No User ID\");\n\t\t\t}\n\n\t\t\tconst payload: SendMessageRequest = {\n\t\t\t\tcontent: message,\n\t\t\t\tuser_id: user.id || userFromStorage.id,\n\t\t\t};\n\n\t\t\t// Save Message to local state\n\t\t\tdispatch(addMessage({ content: message, user_id: payload.user_id.toString(), isBot: false }));\n\n\t\t\tconst { data } = await axios.post(`${backendURL}/chat/message/new`, payload);\n\n\t\t\treturn data as SendMessageResponse;\n\t\t} catch (error: any) {\n\t\t\t// OPtional way to add errors to the UI (not implemented in this example)\n\t\t\t// if (error.message) {\n\t\t\t// \tdispatch(\n\t\t\t// \t\taddError({\n\t\t\t// \t\t\tmessage: error.message,\n\t\t\t// \t\t\tlevel: \"error\",\n\t\t\t// \t\t})\n\t\t\t// \t);\n\t\t\t// \tdispatch(clearError());\n\t\t\t// }\n\t\t\treturn rejectWithValue(error);\n\t\t}\n\t}\n);\n\nconst chatSlice = createSlice({\n\tname: \"chat\",\n\tinitialState,\n\treducers: {\n\t\taddMessage: (state, { payload }) => {\n\t\t\tstate.messages.push(payload);\n\t\t},\n\t\tdeleteMessage: (state, { payload }) => {\n\t\t\tstate.messages = state.messages.filter((msg, index) => index !== payload);\n\t\t},\n\t},\n\textraReducers(builder) {\n\t\tbuilder\n\t\t\t.addCase(sendMessage.fulfilled, (state, { payload }) => {\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: payload.content,\n\t\t\t\t\tuser_id: payload.user_id.toString(),\n\t\t\t\t\tisBot: true,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.addCase(sendMessage.pending, (state) => {\n\t\t\t\tstate.loading = true;\n\t\t\t})\n\t\t\t.addCase(sendMessage.rejected, (state, { payload }) => {\n\t\t\t\tconsole.error(payload);\n\t\t\t\tstate.messages.push({\n\t\t\t\t\tcontent: \"Sorry, I am not able to respond right now. Please try again later.\",\n\t\t\t\t\tuser_id: \"bot\",\n\t\t\t\t\tisBot: true,\n\t\t\t\t});\n\t\t\t\tstate.loading = false;\n\t\t\t});\n\t},\n});\n\nexport const { addMessage, deleteMessage } = chatSlice.actions;\nexport default chatSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}